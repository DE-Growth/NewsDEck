# 기존 베이스 유지 : airflow-init 서비스 (초기화), producer, streamlit 서비스, .env 파일 설정, init.sql 초기화 방식, airflow/airflow/airflow 데이터베이스 설정
# 추가 항목 : 모든 서비스에 restart: unless-stopped 추가 (자동 재시작), PostgreSQL 헬스체크 개선 (30초 간격, 3회 재시도), 컨테이너 이름에 news_ 접두사 (더 명확한 식별), 볼륨에 driver: local 명시
# 시간대 설정: 모든 서비스에 TZ=Asia/Seoul 환경변수 추가

version: "3.8"

services:
  # 1. 메시지 큐: Zookeeper (Bitnami)
  zookeeper:
    image: bitnami/zookeeper:3.9.2
    container_name: news_zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - TZ=Asia/Seoul
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    restart: unless-stopped

  # 1. 메시지 큐: Kafka (Bitnami)
  kafka:
    image: bitnami/kafka:3.7.0
    container_name: news_kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - TZ=Asia/Seoul
    volumes:
      - kafka-data:/bitnami/kafka
    restart: unless-stopped

  # 2. 데이터베이스: PostgreSQL
  postgres:
    image: postgres:14
    container_name: news_postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      TZ: Asia/Seoul
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # 3. 워크플로우 오케스트레이터: Airflow 초기화
  airflow-init:
    build:
      context: ./dags
    container_name: news_airflow_init
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create --role Admin --username admin --password admin --firstname Anonymous --lastname User --email admin@example.com"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - TZ=Asia/Seoul
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    restart: "no"

  # Airflow 웹서버
  airflow-webserver:
    build:
      context: ./dags
    container_name: news_airflow_webserver
    ports:
      - "8080:8080"
    depends_on:
      - airflow-init
    command: webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - TZ=Asia/Seoul
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    restart: unless-stopped

  # Airflow 스케줄러
  airflow-scheduler:
    build:
      context: ./dags
    container_name: news_airflow_scheduler
    depends_on:
      - airflow-init
    command: scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - TZ=Asia/Seoul
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    restart: unless-stopped

  # 4. 뉴스 수집기
  producer:
    container_name: news_producer
    build:
      context: ./producer
    env_file:
      - ./.env
    environment:
      - TZ=Asia/Seoul
    depends_on:
      kafka:
        condition: service_started
    volumes:
      - ./producer:/usr/src/app
    restart: unless-stopped

  # 5. 대시보드
  streamlit:
    container_name: news_dashboard
    build:
      context: ./streamlit
    env_file:
      - ./.env
    environment:
      - TZ=Asia/Seoul
    ports:
      - "8501:8501"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./streamlit:/app
    restart: unless-stopped

# 데이터 영속성을 위한 볼륨 정의
volumes:
  postgres-db-volume:
    driver: local
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local